{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","aria-current","about","onClick","toggleMode","role","htmlF","or","TextForm","text","setText","useState","Fragment","style","color","heading","value","backgroundColor","onChange","event","target","rows","handleUpClick","newText","toUpperCase","showAlert","handleDwClick","toLowerCase","handleExtraSpaces","split","join","handleCopy","document","getElementById","select","navigator","clipboard","writeText","handleTrimClick","trim","handleClearClick","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","defaultProps","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.a8cc067a.chunk.js","sourcesContent":["//if you want to use react component write 'rfc'\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n// export default function Navbar() {\r\n//   return (\r\n//     <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n//   <a className=\"navbar-brand\" href=\"/\">Text Utils</a>\r\n//   <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n//     <span className=\"navbar-toggler-icon\"></span>\r\n//   </button>\r\n\r\n//   <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n//     <ul className=\"navbar-nav mr-auto\">\r\n//       <li className=\"nav-item active\">\r\n//         <a className=\"nav-link\" href=\"/\">Home <span className=\"sr-only\">(current)</span></a>\r\n//       </li>\r\n//       <li className=\"nav-item\">\r\n//         <a className=\"nav-link\" href=\"/\">About</a>\r\n//       </li>\r\n      \r\n      \r\n//     </ul>\r\n//     <form className=\"form-inline my-2 my-lg-0\">\r\n//       <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n//       <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n//     </form>\r\n//   </div>\r\n// </nav>\r\n//   )\r\n// }\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} `}>\r\n        <div className='container-fluid'>\r\n    {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n  \r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav mr-auto\">\r\n        <li className=\"nav-item active\">\r\n        {/* <Link className=\"nav-link active\" aria-current='page' to=\"/\">Home</Link> */}\r\n          <a className=\"nav-link active\" aria-current='page' href=\"#\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          {/* <Link className=\"nav-link\" to=\"/about\">{props.about}</Link> */}\r\n          <a className=\"nav-link\" href=\"/about\">{props.about}</a>\r\n        </li>\r\n      </ul>\r\n      {/* <form className=\"form-inline my-2 my-lg-0\">\r\n        <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n      </form> */}\r\n       </div> \r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n          <input className=\"form-check-input\"onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n          <label className=\"form-check-label\" htmlF   or=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n      </div>\r\n   \r\n    </div>\r\n  </nav>\r\n    )\r\n  }\r\n\r\n//   if you send wrong propTypes the it will give error\r\n// Navbar.propTypes={title:PropTypes.string,\r\n//                   about:PropTypes.string}\r\n                  //title:PropTypes.string.isRequired   also use\r\nNavbar.propTypes={title:PropTypes.string.isRequired,\r\n                    about:PropTypes.string.isRequired}\r\n\r\n//set defaultProps\r\nNavbar.defaultProps={\r\n    title:'Set Title Here',\r\n    about:'About'\r\n}\r\n","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    // hook -- text jaha bhi use hoga without loading update ho jayega\r\n        const [text,setText] = useState('')  ;\r\n        // text='jdvdjn'       //wrong way to change state\r\n        //setText('This is new state');       //wrong way to change state\r\n\r\n        const handleUpClick=()=>{\r\n            // console.log(\"Uppercase was clicked\" + text);\r\n            let newText=text.toUpperCase()\r\n            setText(newText);\r\n            props.showAlert('Converted to Uppercase','success')\r\n        }\r\n        const handleDwClick=()=>{\r\n            let newText=text.toLowerCase()\r\n            setText(newText);\r\n            props.showAlert('Converted to Lowercase','success')\r\n        }\r\n        const handleTrimClick=()=>{\r\n            let newText=text.trim()\r\n            setText(newText);\r\n            props.showAlert('Whitespaces has been removed from starting','success')\r\n        }\r\n        const handleCopy = () => {\r\n            var text = document.getElementById(\"myBox\");\r\n            text.select();\r\n            navigator.clipboard.writeText(text.value);\r\n            props.showAlert('Text is Coppied on clipboard','success')\r\n        }\r\n\r\n        const handleExtraSpaces = () => {\r\n            let newText = text.split(/[ ]+/);\r\n            setText(newText.join(\" \"));\r\n            props.showAlert('Extra spaces removed','success')\r\n        }\r\n\r\n        const handleClearClick=()=>{\r\n            let newText=''\r\n            setText(newText);\r\n            props.showAlert('Input field is reset','success')\r\n        }\r\n\r\n        const handleOnChange=(event)=>{\r\n            // console.log(\"Handle on change\");\r\n            setText(event.target.value);\r\n            \r\n        }\r\n        \r\n  return (\r\n    <>\r\n    <div className='container' style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" value={text} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'#042743'}} onChange={handleOnChange} id=\"myBox\" rows=\"15\"></textarea>\r\n        </div>\r\n        <div className='container'>\r\n        <button className='btn btn-primary mx-2' onClick={handleUpClick}>Convert to Uppercase</button>\r\n        <button className='btn btn-primary mx-2' onClick={handleDwClick}>Convert to Lowecase</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove extra spaces</button>\r\n        <button className='btn btn-primary mx-2' onClick={handleCopy}>Copy</button>\r\n        <button className='btn btn-primary mx-2' onClick={handleTrimClick}>Trim</button>\r\n        <button className='btn btn-primary mx-2' onClick={handleClearClick}>Reset</button>\r\n        </div>    \r\n    </div>\r\n    <div className='container my-3' style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n        <h1>Your Text Summary</h1>\r\n        <p>{text.split(' ').length} words and {text.length} characters</p>\r\n        <p>{0.008*text.split(' ').length} Minutes to read</p>\r\n        <h2>Preview:</h2>\r\n        <p>{text.length>0 ?text:'Enter something in the textbox above to priview it here'}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+ lower.slice(1);\r\n    }\r\n  return (\r\n    //if props.alert was false the not execute rest code\r\n      props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show` }role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong> {props.alert.msg}\r\n        \r\n    </div>\r\n    \r\n  )\r\n}\r\n","\nimport React,{useState } from 'react';\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n\n// import{\n//   BrowserRouter,\n//   Route,\n//   Routes\n// } from 'react-router-dom';\n\n\nfunction App() {\n  const [mode,setMode] = useState('light');   //dark mode enable or not\n  const [alert,setAlert]=useState(null);\n\n  const showAlert=(message,type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(()=>{\n      setAlert(null);\n    },3000)\n  }\n  const toggleMode=()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor='#042743';\n      showAlert('Dark mode has been enabled','success');\n      document.title='TextUtils-DarkMode';\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert('Light mode has been enabled','success');\n      document.title='TextUtils-LightMode';\n    }\n  }\n  \n  return (\n    <>\n    {/* <h1>Hi</h1>      */}\n    {/* here only one element return if you want to return more element use<></> */}\n    {/* <div className=\"App\">\n      Marcos\n    </div> */}\n\n    {/* <nav>\n      <li>Home</li>\n      <li>About</li>\n      <li>Contact</li>\n    </nav>\n    <div className='container'>\n      <h1>Hello {name}</h1>  //you can add js in {}\n      <p>Battlegrounds Mobile India is the Indian version of PUBG Mobile, exclusively for players in India. It is an online multiplayer battle royale game developed and published by Krafton. The game was initially released on 2 July 2021 for Android devices, and on 18 August 2021 for iOS devices.</p>\n    </div> */}\n\n    {/* now we use Navbar component for reduce ambiguity in code */}\n    {/* <Navbar/>     import navbar component */}\n    {/* <Navbar title=''textutils/>   here we return props  */}\n    {/* <BrowserRouter>  */}      {/*because router not work rpoperly on github */}\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n    {/* <Alert alert='This is temerory alert' /> */}\n     <Alert alert={alert} />\n    {/* <Routes>  */}\n        {/* /users --->component1\n           /user/home ---> component1 \n           to eleminate this use exact*/}\n          {/* <Route exact path=\"/about\" element={<About />}>\n          </Route>\n          <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading='Enter the text to analyze' mode={mode} />}>\n          </Route>\n        </Routes>\n        </BrowserRouter> */}\n         <TextForm showAlert={showAlert} heading='Enter the text to analyze' mode={mode} />\n    \n    </>\n  );\n  \n}\n\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}